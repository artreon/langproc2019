Terminals unused in grammar

   AMPERSAND


State 110 conflicts: 1 shift/reduce


Grammar

    0 $accept: program $end

    1 program: global_decl

    2 global_decl: declaration
    3            | global_decl declaration

    4 declaration: variable_decl
    5            | function_decl

    6 function_decl: type IDENTIFIER L_BRACKET arguments_formal R_BRACKET block
    7              | type IDENTIFIER L_BRACKET R_BRACKET block
    8              | type IDENTIFIER L_BRACKET arguments_formal R_BRACKET SEMI_COLON
    9              | type IDENTIFIER L_BRACKET R_BRACKET SEMI_COLON

   10 block: L_BRACE statement_list R_BRACE
   11      | L_BRACE R_BRACE

   12 statement_list: statement
   13               | statement_list statement

   14 statement: expression SEMI_COLON
   15          | RETURN expression SEMI_COLON
   16          | RETURN SEMI_COLON
   17          | variable_decl
   18          | selective_statement
   19          | looping_statement
   20          | block

   21 selective_statement: IF L_BRACKET expression R_BRACKET statement
   22                    | IF L_BRACKET expression R_BRACKET statement ELSE statement

   23 looping_statement: WHILE L_BRACKET expression R_BRACKET block

   24 variable_decl: type IDENTIFIER SEMI_COLON
   25              | type IDENTIFIER COMMA IDENTIFIER SEMI_COLON
   26              | type IDENTIFIER T_EQUALS expression SEMI_COLON

   27 expression: logic_or_expression
   28           | IDENTIFIER T_EQUALS expression

   29 logic_or_expression: logic_and_expression
   30                    | logic_or_expression T_ORCOND logic_and_expression

   31 logic_and_expression: cmp_expression
   32                     | logic_and_expression T_ANDCOND cmp_expression

   33 cmp_expression: add_sub_expression
   34               | cmp_expression T_EQUALSTO add_sub_expression
   35               | cmp_expression T_LESSTHAN add_sub_expression
   36               | cmp_expression T_LESSOREQUAL add_sub_expression
   37               | cmp_expression T_MORETHAN add_sub_expression
   38               | cmp_expression T_MOREOREQUAL add_sub_expression
   39               | cmp_expression T_NOT_EQUAL add_sub_expression

   40 add_sub_expression: term
   41                   | add_sub_expression T_PLUS term
   42                   | add_sub_expression T_MINUS term

   43 term: factor
   44     | term T_MULT factor
   45     | term T_DIVIDE factor
   46     | term T_MOD factor

   47 factor: NUMBER
   48       | CHAR_WORD
   49       | WORD
   50       | IDENTIFIER
   51       | function_call
   52       | L_BRACKET expression R_BRACKET

   53 function_call: IDENTIFIER L_BRACKET arguments R_BRACKET
   54              | IDENTIFIER L_BRACKET R_BRACKET

   55 arguments_formal: type IDENTIFIER
   56                 | arguments_formal COMMA type IDENTIFIER

   57 arguments: expression
   58          | arguments COMMA expression

   59 type: INT
   60     | CHAR
   61     | VOID
   62     | type T_MULT


Terminals, with rules where they appear

$end (0) 0
error (256)
INT (258) 59
CHAR (259) 60
VOID (260) 61
CHAR_WORD (261) 48
COMMA (262) 25 56 58
IF (263) 21 22
ELSE (264) 22
AMPERSAND (265)
WHILE (266) 23
IDENTIFIER (267) 6 7 8 9 24 25 26 28 50 53 54 55 56
RETURN (268) 15 16
NUMBER (269) 47
WORD (270) 49
L_BRACE (271) 10 11
R_BRACE (272) 10 11
L_BRACKET (273) 6 7 8 9 21 22 23 52 53 54
R_BRACKET (274) 6 7 8 9 21 22 23 52 53 54
SEMI_COLON (275) 8 9 14 15 16 24 25 26
T_EQUALS (276) 26 28
T_PLUS (277) 41
T_DIVIDE (278) 45
T_MOD (279) 46
T_MULT (280) 44 62
T_MINUS (281) 42
T_EQUALSTO (282) 34
T_LESSTHAN (283) 35
T_MORETHAN (284) 37
T_LESSOREQUAL (285) 36
T_MOREOREQUAL (286) 38
T_NOT_EQUAL (287) 39
T_ANDCOND (288) 32
T_ORCOND (289) 30


Nonterminals, with rules where they appear

$accept (35)
    on left: 0
program (36)
    on left: 1, on right: 0
global_decl (37)
    on left: 2 3, on right: 1 3
declaration (38)
    on left: 4 5, on right: 2 3
function_decl (39)
    on left: 6 7 8 9, on right: 5
block (40)
    on left: 10 11, on right: 6 7 20 23
statement_list (41)
    on left: 12 13, on right: 10 13
statement (42)
    on left: 14 15 16 17 18 19 20, on right: 12 13 21 22
selective_statement (43)
    on left: 21 22, on right: 18
looping_statement (44)
    on left: 23, on right: 19
variable_decl (45)
    on left: 24 25 26, on right: 4 17
expression (46)
    on left: 27 28, on right: 14 15 21 22 23 26 28 52 57 58
logic_or_expression (47)
    on left: 29 30, on right: 27 30
logic_and_expression (48)
    on left: 31 32, on right: 29 30 32
cmp_expression (49)
    on left: 33 34 35 36 37 38 39, on right: 31 32 34 35 36 37 38 39
add_sub_expression (50)
    on left: 40 41 42, on right: 33 34 35 36 37 38 39 41 42
term (51)
    on left: 43 44 45 46, on right: 40 41 42 44 45 46
factor (52)
    on left: 47 48 49 50 51 52, on right: 43 44 45 46
function_call (53)
    on left: 53 54, on right: 51
arguments_formal (54)
    on left: 55 56, on right: 6 8 56
arguments (55)
    on left: 57 58, on right: 53 58
type (56)
    on left: 59 60 61 62, on right: 6 7 8 9 24 25 26 55 56 62


State 0

    0 $accept: . program $end

    INT   shift, and go to state 1
    CHAR  shift, and go to state 2
    VOID  shift, and go to state 3

    program        go to state 4
    global_decl    go to state 5
    declaration    go to state 6
    function_decl  go to state 7
    variable_decl  go to state 8
    type           go to state 9


State 1

   59 type: INT .

    $default  reduce using rule 59 (type)


State 2

   60 type: CHAR .

    $default  reduce using rule 60 (type)


State 3

   61 type: VOID .

    $default  reduce using rule 61 (type)


State 4

    0 $accept: program . $end

    $end  shift, and go to state 10


State 5

    1 program: global_decl .
    3 global_decl: global_decl . declaration

    INT   shift, and go to state 1
    CHAR  shift, and go to state 2
    VOID  shift, and go to state 3

    $default  reduce using rule 1 (program)

    declaration    go to state 11
    function_decl  go to state 7
    variable_decl  go to state 8
    type           go to state 9


State 6

    2 global_decl: declaration .

    $default  reduce using rule 2 (global_decl)


State 7

    5 declaration: function_decl .

    $default  reduce using rule 5 (declaration)


State 8

    4 declaration: variable_decl .

    $default  reduce using rule 4 (declaration)


State 9

    6 function_decl: type . IDENTIFIER L_BRACKET arguments_formal R_BRACKET block
    7              | type . IDENTIFIER L_BRACKET R_BRACKET block
    8              | type . IDENTIFIER L_BRACKET arguments_formal R_BRACKET SEMI_COLON
    9              | type . IDENTIFIER L_BRACKET R_BRACKET SEMI_COLON
   24 variable_decl: type . IDENTIFIER SEMI_COLON
   25              | type . IDENTIFIER COMMA IDENTIFIER SEMI_COLON
   26              | type . IDENTIFIER T_EQUALS expression SEMI_COLON
   62 type: type . T_MULT

    IDENTIFIER  shift, and go to state 12
    T_MULT      shift, and go to state 13


State 10

    0 $accept: program $end .

    $default  accept


State 11

    3 global_decl: global_decl declaration .

    $default  reduce using rule 3 (global_decl)


State 12

    6 function_decl: type IDENTIFIER . L_BRACKET arguments_formal R_BRACKET block
    7              | type IDENTIFIER . L_BRACKET R_BRACKET block
    8              | type IDENTIFIER . L_BRACKET arguments_formal R_BRACKET SEMI_COLON
    9              | type IDENTIFIER . L_BRACKET R_BRACKET SEMI_COLON
   24 variable_decl: type IDENTIFIER . SEMI_COLON
   25              | type IDENTIFIER . COMMA IDENTIFIER SEMI_COLON
   26              | type IDENTIFIER . T_EQUALS expression SEMI_COLON

    COMMA       shift, and go to state 14
    L_BRACKET   shift, and go to state 15
    SEMI_COLON  shift, and go to state 16
    T_EQUALS    shift, and go to state 17


State 13

   62 type: type T_MULT .

    $default  reduce using rule 62 (type)


State 14

   25 variable_decl: type IDENTIFIER COMMA . IDENTIFIER SEMI_COLON

    IDENTIFIER  shift, and go to state 18


State 15

    6 function_decl: type IDENTIFIER L_BRACKET . arguments_formal R_BRACKET block
    7              | type IDENTIFIER L_BRACKET . R_BRACKET block
    8              | type IDENTIFIER L_BRACKET . arguments_formal R_BRACKET SEMI_COLON
    9              | type IDENTIFIER L_BRACKET . R_BRACKET SEMI_COLON

    INT        shift, and go to state 1
    CHAR       shift, and go to state 2
    VOID       shift, and go to state 3
    R_BRACKET  shift, and go to state 19

    arguments_formal  go to state 20
    type              go to state 21


State 16

   24 variable_decl: type IDENTIFIER SEMI_COLON .

    $default  reduce using rule 24 (variable_decl)


State 17

   26 variable_decl: type IDENTIFIER T_EQUALS . expression SEMI_COLON

    CHAR_WORD   shift, and go to state 22
    IDENTIFIER  shift, and go to state 23
    NUMBER      shift, and go to state 24
    WORD        shift, and go to state 25
    L_BRACKET   shift, and go to state 26

    expression            go to state 27
    logic_or_expression   go to state 28
    logic_and_expression  go to state 29
    cmp_expression        go to state 30
    add_sub_expression    go to state 31
    term                  go to state 32
    factor                go to state 33
    function_call         go to state 34


State 18

   25 variable_decl: type IDENTIFIER COMMA IDENTIFIER . SEMI_COLON

    SEMI_COLON  shift, and go to state 35


State 19

    7 function_decl: type IDENTIFIER L_BRACKET R_BRACKET . block
    9              | type IDENTIFIER L_BRACKET R_BRACKET . SEMI_COLON

    L_BRACE     shift, and go to state 36
    SEMI_COLON  shift, and go to state 37

    block  go to state 38


State 20

    6 function_decl: type IDENTIFIER L_BRACKET arguments_formal . R_BRACKET block
    8              | type IDENTIFIER L_BRACKET arguments_formal . R_BRACKET SEMI_COLON
   56 arguments_formal: arguments_formal . COMMA type IDENTIFIER

    COMMA      shift, and go to state 39
    R_BRACKET  shift, and go to state 40


State 21

   55 arguments_formal: type . IDENTIFIER
   62 type: type . T_MULT

    IDENTIFIER  shift, and go to state 41
    T_MULT      shift, and go to state 13


State 22

   48 factor: CHAR_WORD .

    $default  reduce using rule 48 (factor)


State 23

   28 expression: IDENTIFIER . T_EQUALS expression
   50 factor: IDENTIFIER .
   53 function_call: IDENTIFIER . L_BRACKET arguments R_BRACKET
   54              | IDENTIFIER . L_BRACKET R_BRACKET

    L_BRACKET  shift, and go to state 42
    T_EQUALS   shift, and go to state 43

    $default  reduce using rule 50 (factor)


State 24

   47 factor: NUMBER .

    $default  reduce using rule 47 (factor)


State 25

   49 factor: WORD .

    $default  reduce using rule 49 (factor)


State 26

   52 factor: L_BRACKET . expression R_BRACKET

    CHAR_WORD   shift, and go to state 22
    IDENTIFIER  shift, and go to state 23
    NUMBER      shift, and go to state 24
    WORD        shift, and go to state 25
    L_BRACKET   shift, and go to state 26

    expression            go to state 44
    logic_or_expression   go to state 28
    logic_and_expression  go to state 29
    cmp_expression        go to state 30
    add_sub_expression    go to state 31
    term                  go to state 32
    factor                go to state 33
    function_call         go to state 34


State 27

   26 variable_decl: type IDENTIFIER T_EQUALS expression . SEMI_COLON

    SEMI_COLON  shift, and go to state 45


State 28

   27 expression: logic_or_expression .
   30 logic_or_expression: logic_or_expression . T_ORCOND logic_and_expression

    T_ORCOND  shift, and go to state 46

    $default  reduce using rule 27 (expression)


State 29

   29 logic_or_expression: logic_and_expression .
   32 logic_and_expression: logic_and_expression . T_ANDCOND cmp_expression

    T_ANDCOND  shift, and go to state 47

    $default  reduce using rule 29 (logic_or_expression)


State 30

   31 logic_and_expression: cmp_expression .
   34 cmp_expression: cmp_expression . T_EQUALSTO add_sub_expression
   35               | cmp_expression . T_LESSTHAN add_sub_expression
   36               | cmp_expression . T_LESSOREQUAL add_sub_expression
   37               | cmp_expression . T_MORETHAN add_sub_expression
   38               | cmp_expression . T_MOREOREQUAL add_sub_expression
   39               | cmp_expression . T_NOT_EQUAL add_sub_expression

    T_EQUALSTO     shift, and go to state 48
    T_LESSTHAN     shift, and go to state 49
    T_MORETHAN     shift, and go to state 50
    T_LESSOREQUAL  shift, and go to state 51
    T_MOREOREQUAL  shift, and go to state 52
    T_NOT_EQUAL    shift, and go to state 53

    $default  reduce using rule 31 (logic_and_expression)


State 31

   33 cmp_expression: add_sub_expression .
   41 add_sub_expression: add_sub_expression . T_PLUS term
   42                   | add_sub_expression . T_MINUS term

    T_PLUS   shift, and go to state 54
    T_MINUS  shift, and go to state 55

    $default  reduce using rule 33 (cmp_expression)


State 32

   40 add_sub_expression: term .
   44 term: term . T_MULT factor
   45     | term . T_DIVIDE factor
   46     | term . T_MOD factor

    T_DIVIDE  shift, and go to state 56
    T_MOD     shift, and go to state 57
    T_MULT    shift, and go to state 58

    $default  reduce using rule 40 (add_sub_expression)


State 33

   43 term: factor .

    $default  reduce using rule 43 (term)


State 34

   51 factor: function_call .

    $default  reduce using rule 51 (factor)


State 35

   25 variable_decl: type IDENTIFIER COMMA IDENTIFIER SEMI_COLON .

    $default  reduce using rule 25 (variable_decl)


State 36

   10 block: L_BRACE . statement_list R_BRACE
   11      | L_BRACE . R_BRACE

    INT         shift, and go to state 1
    CHAR        shift, and go to state 2
    VOID        shift, and go to state 3
    CHAR_WORD   shift, and go to state 22
    IF          shift, and go to state 59
    WHILE       shift, and go to state 60
    IDENTIFIER  shift, and go to state 23
    RETURN      shift, and go to state 61
    NUMBER      shift, and go to state 24
    WORD        shift, and go to state 25
    L_BRACE     shift, and go to state 36
    R_BRACE     shift, and go to state 62
    L_BRACKET   shift, and go to state 26

    block                 go to state 63
    statement_list        go to state 64
    statement             go to state 65
    selective_statement   go to state 66
    looping_statement     go to state 67
    variable_decl         go to state 68
    expression            go to state 69
    logic_or_expression   go to state 28
    logic_and_expression  go to state 29
    cmp_expression        go to state 30
    add_sub_expression    go to state 31
    term                  go to state 32
    factor                go to state 33
    function_call         go to state 34
    type                  go to state 70


State 37

    9 function_decl: type IDENTIFIER L_BRACKET R_BRACKET SEMI_COLON .

    $default  reduce using rule 9 (function_decl)


State 38

    7 function_decl: type IDENTIFIER L_BRACKET R_BRACKET block .

    $default  reduce using rule 7 (function_decl)


State 39

   56 arguments_formal: arguments_formal COMMA . type IDENTIFIER

    INT   shift, and go to state 1
    CHAR  shift, and go to state 2
    VOID  shift, and go to state 3

    type  go to state 71


State 40

    6 function_decl: type IDENTIFIER L_BRACKET arguments_formal R_BRACKET . block
    8              | type IDENTIFIER L_BRACKET arguments_formal R_BRACKET . SEMI_COLON

    L_BRACE     shift, and go to state 36
    SEMI_COLON  shift, and go to state 72

    block  go to state 73


State 41

   55 arguments_formal: type IDENTIFIER .

    $default  reduce using rule 55 (arguments_formal)


State 42

   53 function_call: IDENTIFIER L_BRACKET . arguments R_BRACKET
   54              | IDENTIFIER L_BRACKET . R_BRACKET

    CHAR_WORD   shift, and go to state 22
    IDENTIFIER  shift, and go to state 23
    NUMBER      shift, and go to state 24
    WORD        shift, and go to state 25
    L_BRACKET   shift, and go to state 26
    R_BRACKET   shift, and go to state 74

    expression            go to state 75
    logic_or_expression   go to state 28
    logic_and_expression  go to state 29
    cmp_expression        go to state 30
    add_sub_expression    go to state 31
    term                  go to state 32
    factor                go to state 33
    function_call         go to state 34
    arguments             go to state 76


State 43

   28 expression: IDENTIFIER T_EQUALS . expression

    CHAR_WORD   shift, and go to state 22
    IDENTIFIER  shift, and go to state 23
    NUMBER      shift, and go to state 24
    WORD        shift, and go to state 25
    L_BRACKET   shift, and go to state 26

    expression            go to state 77
    logic_or_expression   go to state 28
    logic_and_expression  go to state 29
    cmp_expression        go to state 30
    add_sub_expression    go to state 31
    term                  go to state 32
    factor                go to state 33
    function_call         go to state 34


State 44

   52 factor: L_BRACKET expression . R_BRACKET

    R_BRACKET  shift, and go to state 78


State 45

   26 variable_decl: type IDENTIFIER T_EQUALS expression SEMI_COLON .

    $default  reduce using rule 26 (variable_decl)


State 46

   30 logic_or_expression: logic_or_expression T_ORCOND . logic_and_expression

    CHAR_WORD   shift, and go to state 22
    IDENTIFIER  shift, and go to state 79
    NUMBER      shift, and go to state 24
    WORD        shift, and go to state 25
    L_BRACKET   shift, and go to state 26

    logic_and_expression  go to state 80
    cmp_expression        go to state 30
    add_sub_expression    go to state 31
    term                  go to state 32
    factor                go to state 33
    function_call         go to state 34


State 47

   32 logic_and_expression: logic_and_expression T_ANDCOND . cmp_expression

    CHAR_WORD   shift, and go to state 22
    IDENTIFIER  shift, and go to state 79
    NUMBER      shift, and go to state 24
    WORD        shift, and go to state 25
    L_BRACKET   shift, and go to state 26

    cmp_expression      go to state 81
    add_sub_expression  go to state 31
    term                go to state 32
    factor              go to state 33
    function_call       go to state 34


State 48

   34 cmp_expression: cmp_expression T_EQUALSTO . add_sub_expression

    CHAR_WORD   shift, and go to state 22
    IDENTIFIER  shift, and go to state 79
    NUMBER      shift, and go to state 24
    WORD        shift, and go to state 25
    L_BRACKET   shift, and go to state 26

    add_sub_expression  go to state 82
    term                go to state 32
    factor              go to state 33
    function_call       go to state 34


State 49

   35 cmp_expression: cmp_expression T_LESSTHAN . add_sub_expression

    CHAR_WORD   shift, and go to state 22
    IDENTIFIER  shift, and go to state 79
    NUMBER      shift, and go to state 24
    WORD        shift, and go to state 25
    L_BRACKET   shift, and go to state 26

    add_sub_expression  go to state 83
    term                go to state 32
    factor              go to state 33
    function_call       go to state 34


State 50

   37 cmp_expression: cmp_expression T_MORETHAN . add_sub_expression

    CHAR_WORD   shift, and go to state 22
    IDENTIFIER  shift, and go to state 79
    NUMBER      shift, and go to state 24
    WORD        shift, and go to state 25
    L_BRACKET   shift, and go to state 26

    add_sub_expression  go to state 84
    term                go to state 32
    factor              go to state 33
    function_call       go to state 34


State 51

   36 cmp_expression: cmp_expression T_LESSOREQUAL . add_sub_expression

    CHAR_WORD   shift, and go to state 22
    IDENTIFIER  shift, and go to state 79
    NUMBER      shift, and go to state 24
    WORD        shift, and go to state 25
    L_BRACKET   shift, and go to state 26

    add_sub_expression  go to state 85
    term                go to state 32
    factor              go to state 33
    function_call       go to state 34


State 52

   38 cmp_expression: cmp_expression T_MOREOREQUAL . add_sub_expression

    CHAR_WORD   shift, and go to state 22
    IDENTIFIER  shift, and go to state 79
    NUMBER      shift, and go to state 24
    WORD        shift, and go to state 25
    L_BRACKET   shift, and go to state 26

    add_sub_expression  go to state 86
    term                go to state 32
    factor              go to state 33
    function_call       go to state 34


State 53

   39 cmp_expression: cmp_expression T_NOT_EQUAL . add_sub_expression

    CHAR_WORD   shift, and go to state 22
    IDENTIFIER  shift, and go to state 79
    NUMBER      shift, and go to state 24
    WORD        shift, and go to state 25
    L_BRACKET   shift, and go to state 26

    add_sub_expression  go to state 87
    term                go to state 32
    factor              go to state 33
    function_call       go to state 34


State 54

   41 add_sub_expression: add_sub_expression T_PLUS . term

    CHAR_WORD   shift, and go to state 22
    IDENTIFIER  shift, and go to state 79
    NUMBER      shift, and go to state 24
    WORD        shift, and go to state 25
    L_BRACKET   shift, and go to state 26

    term           go to state 88
    factor         go to state 33
    function_call  go to state 34


State 55

   42 add_sub_expression: add_sub_expression T_MINUS . term

    CHAR_WORD   shift, and go to state 22
    IDENTIFIER  shift, and go to state 79
    NUMBER      shift, and go to state 24
    WORD        shift, and go to state 25
    L_BRACKET   shift, and go to state 26

    term           go to state 89
    factor         go to state 33
    function_call  go to state 34


State 56

   45 term: term T_DIVIDE . factor

    CHAR_WORD   shift, and go to state 22
    IDENTIFIER  shift, and go to state 79
    NUMBER      shift, and go to state 24
    WORD        shift, and go to state 25
    L_BRACKET   shift, and go to state 26

    factor         go to state 90
    function_call  go to state 34


State 57

   46 term: term T_MOD . factor

    CHAR_WORD   shift, and go to state 22
    IDENTIFIER  shift, and go to state 79
    NUMBER      shift, and go to state 24
    WORD        shift, and go to state 25
    L_BRACKET   shift, and go to state 26

    factor         go to state 91
    function_call  go to state 34


State 58

   44 term: term T_MULT . factor

    CHAR_WORD   shift, and go to state 22
    IDENTIFIER  shift, and go to state 79
    NUMBER      shift, and go to state 24
    WORD        shift, and go to state 25
    L_BRACKET   shift, and go to state 26

    factor         go to state 92
    function_call  go to state 34


State 59

   21 selective_statement: IF . L_BRACKET expression R_BRACKET statement
   22                    | IF . L_BRACKET expression R_BRACKET statement ELSE statement

    L_BRACKET  shift, and go to state 93


State 60

   23 looping_statement: WHILE . L_BRACKET expression R_BRACKET block

    L_BRACKET  shift, and go to state 94


State 61

   15 statement: RETURN . expression SEMI_COLON
   16          | RETURN . SEMI_COLON

    CHAR_WORD   shift, and go to state 22
    IDENTIFIER  shift, and go to state 23
    NUMBER      shift, and go to state 24
    WORD        shift, and go to state 25
    L_BRACKET   shift, and go to state 26
    SEMI_COLON  shift, and go to state 95

    expression            go to state 96
    logic_or_expression   go to state 28
    logic_and_expression  go to state 29
    cmp_expression        go to state 30
    add_sub_expression    go to state 31
    term                  go to state 32
    factor                go to state 33
    function_call         go to state 34


State 62

   11 block: L_BRACE R_BRACE .

    $default  reduce using rule 11 (block)


State 63

   20 statement: block .

    $default  reduce using rule 20 (statement)


State 64

   10 block: L_BRACE statement_list . R_BRACE
   13 statement_list: statement_list . statement

    INT         shift, and go to state 1
    CHAR        shift, and go to state 2
    VOID        shift, and go to state 3
    CHAR_WORD   shift, and go to state 22
    IF          shift, and go to state 59
    WHILE       shift, and go to state 60
    IDENTIFIER  shift, and go to state 23
    RETURN      shift, and go to state 61
    NUMBER      shift, and go to state 24
    WORD        shift, and go to state 25
    L_BRACE     shift, and go to state 36
    R_BRACE     shift, and go to state 97
    L_BRACKET   shift, and go to state 26

    block                 go to state 63
    statement             go to state 98
    selective_statement   go to state 66
    looping_statement     go to state 67
    variable_decl         go to state 68
    expression            go to state 69
    logic_or_expression   go to state 28
    logic_and_expression  go to state 29
    cmp_expression        go to state 30
    add_sub_expression    go to state 31
    term                  go to state 32
    factor                go to state 33
    function_call         go to state 34
    type                  go to state 70


State 65

   12 statement_list: statement .

    $default  reduce using rule 12 (statement_list)


State 66

   18 statement: selective_statement .

    $default  reduce using rule 18 (statement)


State 67

   19 statement: looping_statement .

    $default  reduce using rule 19 (statement)


State 68

   17 statement: variable_decl .

    $default  reduce using rule 17 (statement)


State 69

   14 statement: expression . SEMI_COLON

    SEMI_COLON  shift, and go to state 99


State 70

   24 variable_decl: type . IDENTIFIER SEMI_COLON
   25              | type . IDENTIFIER COMMA IDENTIFIER SEMI_COLON
   26              | type . IDENTIFIER T_EQUALS expression SEMI_COLON
   62 type: type . T_MULT

    IDENTIFIER  shift, and go to state 100
    T_MULT      shift, and go to state 13


State 71

   56 arguments_formal: arguments_formal COMMA type . IDENTIFIER
   62 type: type . T_MULT

    IDENTIFIER  shift, and go to state 101
    T_MULT      shift, and go to state 13


State 72

    8 function_decl: type IDENTIFIER L_BRACKET arguments_formal R_BRACKET SEMI_COLON .

    $default  reduce using rule 8 (function_decl)


State 73

    6 function_decl: type IDENTIFIER L_BRACKET arguments_formal R_BRACKET block .

    $default  reduce using rule 6 (function_decl)


State 74

   54 function_call: IDENTIFIER L_BRACKET R_BRACKET .

    $default  reduce using rule 54 (function_call)


State 75

   57 arguments: expression .

    $default  reduce using rule 57 (arguments)


State 76

   53 function_call: IDENTIFIER L_BRACKET arguments . R_BRACKET
   58 arguments: arguments . COMMA expression

    COMMA      shift, and go to state 102
    R_BRACKET  shift, and go to state 103


State 77

   28 expression: IDENTIFIER T_EQUALS expression .

    $default  reduce using rule 28 (expression)


State 78

   52 factor: L_BRACKET expression R_BRACKET .

    $default  reduce using rule 52 (factor)


State 79

   50 factor: IDENTIFIER .
   53 function_call: IDENTIFIER . L_BRACKET arguments R_BRACKET
   54              | IDENTIFIER . L_BRACKET R_BRACKET

    L_BRACKET  shift, and go to state 42

    $default  reduce using rule 50 (factor)


State 80

   30 logic_or_expression: logic_or_expression T_ORCOND logic_and_expression .
   32 logic_and_expression: logic_and_expression . T_ANDCOND cmp_expression

    T_ANDCOND  shift, and go to state 47

    $default  reduce using rule 30 (logic_or_expression)


State 81

   32 logic_and_expression: logic_and_expression T_ANDCOND cmp_expression .
   34 cmp_expression: cmp_expression . T_EQUALSTO add_sub_expression
   35               | cmp_expression . T_LESSTHAN add_sub_expression
   36               | cmp_expression . T_LESSOREQUAL add_sub_expression
   37               | cmp_expression . T_MORETHAN add_sub_expression
   38               | cmp_expression . T_MOREOREQUAL add_sub_expression
   39               | cmp_expression . T_NOT_EQUAL add_sub_expression

    T_EQUALSTO     shift, and go to state 48
    T_LESSTHAN     shift, and go to state 49
    T_MORETHAN     shift, and go to state 50
    T_LESSOREQUAL  shift, and go to state 51
    T_MOREOREQUAL  shift, and go to state 52
    T_NOT_EQUAL    shift, and go to state 53

    $default  reduce using rule 32 (logic_and_expression)


State 82

   34 cmp_expression: cmp_expression T_EQUALSTO add_sub_expression .
   41 add_sub_expression: add_sub_expression . T_PLUS term
   42                   | add_sub_expression . T_MINUS term

    T_PLUS   shift, and go to state 54
    T_MINUS  shift, and go to state 55

    $default  reduce using rule 34 (cmp_expression)


State 83

   35 cmp_expression: cmp_expression T_LESSTHAN add_sub_expression .
   41 add_sub_expression: add_sub_expression . T_PLUS term
   42                   | add_sub_expression . T_MINUS term

    T_PLUS   shift, and go to state 54
    T_MINUS  shift, and go to state 55

    $default  reduce using rule 35 (cmp_expression)


State 84

   37 cmp_expression: cmp_expression T_MORETHAN add_sub_expression .
   41 add_sub_expression: add_sub_expression . T_PLUS term
   42                   | add_sub_expression . T_MINUS term

    T_PLUS   shift, and go to state 54
    T_MINUS  shift, and go to state 55

    $default  reduce using rule 37 (cmp_expression)


State 85

   36 cmp_expression: cmp_expression T_LESSOREQUAL add_sub_expression .
   41 add_sub_expression: add_sub_expression . T_PLUS term
   42                   | add_sub_expression . T_MINUS term

    T_PLUS   shift, and go to state 54
    T_MINUS  shift, and go to state 55

    $default  reduce using rule 36 (cmp_expression)


State 86

   38 cmp_expression: cmp_expression T_MOREOREQUAL add_sub_expression .
   41 add_sub_expression: add_sub_expression . T_PLUS term
   42                   | add_sub_expression . T_MINUS term

    T_PLUS   shift, and go to state 54
    T_MINUS  shift, and go to state 55

    $default  reduce using rule 38 (cmp_expression)


State 87

   39 cmp_expression: cmp_expression T_NOT_EQUAL add_sub_expression .
   41 add_sub_expression: add_sub_expression . T_PLUS term
   42                   | add_sub_expression . T_MINUS term

    T_PLUS   shift, and go to state 54
    T_MINUS  shift, and go to state 55

    $default  reduce using rule 39 (cmp_expression)


State 88

   41 add_sub_expression: add_sub_expression T_PLUS term .
   44 term: term . T_MULT factor
   45     | term . T_DIVIDE factor
   46     | term . T_MOD factor

    T_DIVIDE  shift, and go to state 56
    T_MOD     shift, and go to state 57
    T_MULT    shift, and go to state 58

    $default  reduce using rule 41 (add_sub_expression)


State 89

   42 add_sub_expression: add_sub_expression T_MINUS term .
   44 term: term . T_MULT factor
   45     | term . T_DIVIDE factor
   46     | term . T_MOD factor

    T_DIVIDE  shift, and go to state 56
    T_MOD     shift, and go to state 57
    T_MULT    shift, and go to state 58

    $default  reduce using rule 42 (add_sub_expression)


State 90

   45 term: term T_DIVIDE factor .

    $default  reduce using rule 45 (term)


State 91

   46 term: term T_MOD factor .

    $default  reduce using rule 46 (term)


State 92

   44 term: term T_MULT factor .

    $default  reduce using rule 44 (term)


State 93

   21 selective_statement: IF L_BRACKET . expression R_BRACKET statement
   22                    | IF L_BRACKET . expression R_BRACKET statement ELSE statement

    CHAR_WORD   shift, and go to state 22
    IDENTIFIER  shift, and go to state 23
    NUMBER      shift, and go to state 24
    WORD        shift, and go to state 25
    L_BRACKET   shift, and go to state 26

    expression            go to state 104
    logic_or_expression   go to state 28
    logic_and_expression  go to state 29
    cmp_expression        go to state 30
    add_sub_expression    go to state 31
    term                  go to state 32
    factor                go to state 33
    function_call         go to state 34


State 94

   23 looping_statement: WHILE L_BRACKET . expression R_BRACKET block

    CHAR_WORD   shift, and go to state 22
    IDENTIFIER  shift, and go to state 23
    NUMBER      shift, and go to state 24
    WORD        shift, and go to state 25
    L_BRACKET   shift, and go to state 26

    expression            go to state 105
    logic_or_expression   go to state 28
    logic_and_expression  go to state 29
    cmp_expression        go to state 30
    add_sub_expression    go to state 31
    term                  go to state 32
    factor                go to state 33
    function_call         go to state 34


State 95

   16 statement: RETURN SEMI_COLON .

    $default  reduce using rule 16 (statement)


State 96

   15 statement: RETURN expression . SEMI_COLON

    SEMI_COLON  shift, and go to state 106


State 97

   10 block: L_BRACE statement_list R_BRACE .

    $default  reduce using rule 10 (block)


State 98

   13 statement_list: statement_list statement .

    $default  reduce using rule 13 (statement_list)


State 99

   14 statement: expression SEMI_COLON .

    $default  reduce using rule 14 (statement)


State 100

   24 variable_decl: type IDENTIFIER . SEMI_COLON
   25              | type IDENTIFIER . COMMA IDENTIFIER SEMI_COLON
   26              | type IDENTIFIER . T_EQUALS expression SEMI_COLON

    COMMA       shift, and go to state 14
    SEMI_COLON  shift, and go to state 16
    T_EQUALS    shift, and go to state 17


State 101

   56 arguments_formal: arguments_formal COMMA type IDENTIFIER .

    $default  reduce using rule 56 (arguments_formal)


State 102

   58 arguments: arguments COMMA . expression

    CHAR_WORD   shift, and go to state 22
    IDENTIFIER  shift, and go to state 23
    NUMBER      shift, and go to state 24
    WORD        shift, and go to state 25
    L_BRACKET   shift, and go to state 26

    expression            go to state 107
    logic_or_expression   go to state 28
    logic_and_expression  go to state 29
    cmp_expression        go to state 30
    add_sub_expression    go to state 31
    term                  go to state 32
    factor                go to state 33
    function_call         go to state 34


State 103

   53 function_call: IDENTIFIER L_BRACKET arguments R_BRACKET .

    $default  reduce using rule 53 (function_call)


State 104

   21 selective_statement: IF L_BRACKET expression . R_BRACKET statement
   22                    | IF L_BRACKET expression . R_BRACKET statement ELSE statement

    R_BRACKET  shift, and go to state 108


State 105

   23 looping_statement: WHILE L_BRACKET expression . R_BRACKET block

    R_BRACKET  shift, and go to state 109


State 106

   15 statement: RETURN expression SEMI_COLON .

    $default  reduce using rule 15 (statement)


State 107

   58 arguments: arguments COMMA expression .

    $default  reduce using rule 58 (arguments)


State 108

   21 selective_statement: IF L_BRACKET expression R_BRACKET . statement
   22                    | IF L_BRACKET expression R_BRACKET . statement ELSE statement

    INT         shift, and go to state 1
    CHAR        shift, and go to state 2
    VOID        shift, and go to state 3
    CHAR_WORD   shift, and go to state 22
    IF          shift, and go to state 59
    WHILE       shift, and go to state 60
    IDENTIFIER  shift, and go to state 23
    RETURN      shift, and go to state 61
    NUMBER      shift, and go to state 24
    WORD        shift, and go to state 25
    L_BRACE     shift, and go to state 36
    L_BRACKET   shift, and go to state 26

    block                 go to state 63
    statement             go to state 110
    selective_statement   go to state 66
    looping_statement     go to state 67
    variable_decl         go to state 68
    expression            go to state 69
    logic_or_expression   go to state 28
    logic_and_expression  go to state 29
    cmp_expression        go to state 30
    add_sub_expression    go to state 31
    term                  go to state 32
    factor                go to state 33
    function_call         go to state 34
    type                  go to state 70


State 109

   23 looping_statement: WHILE L_BRACKET expression R_BRACKET . block

    L_BRACE  shift, and go to state 36

    block  go to state 111


State 110

   21 selective_statement: IF L_BRACKET expression R_BRACKET statement .
   22                    | IF L_BRACKET expression R_BRACKET statement . ELSE statement

    ELSE  shift, and go to state 112

    ELSE      [reduce using rule 21 (selective_statement)]
    $default  reduce using rule 21 (selective_statement)


State 111

   23 looping_statement: WHILE L_BRACKET expression R_BRACKET block .

    $default  reduce using rule 23 (looping_statement)


State 112

   22 selective_statement: IF L_BRACKET expression R_BRACKET statement ELSE . statement

    INT         shift, and go to state 1
    CHAR        shift, and go to state 2
    VOID        shift, and go to state 3
    CHAR_WORD   shift, and go to state 22
    IF          shift, and go to state 59
    WHILE       shift, and go to state 60
    IDENTIFIER  shift, and go to state 23
    RETURN      shift, and go to state 61
    NUMBER      shift, and go to state 24
    WORD        shift, and go to state 25
    L_BRACE     shift, and go to state 36
    L_BRACKET   shift, and go to state 26

    block                 go to state 63
    statement             go to state 113
    selective_statement   go to state 66
    looping_statement     go to state 67
    variable_decl         go to state 68
    expression            go to state 69
    logic_or_expression   go to state 28
    logic_and_expression  go to state 29
    cmp_expression        go to state 30
    add_sub_expression    go to state 31
    term                  go to state 32
    factor                go to state 33
    function_call         go to state 34
    type                  go to state 70


State 113

   22 selective_statement: IF L_BRACKET expression R_BRACKET statement ELSE statement .

    $default  reduce using rule 22 (selective_statement)
